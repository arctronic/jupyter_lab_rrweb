{"version":3,"file":"lib_index_js-data_image_svg_xml_base64_PHN2ZyBoZWlnaHQ9IjMwMCIgd2lkdGg9IjMwMCIgeG1sbnM9Imh0dH-96ddf1.95045fd5694b524e0aa8.js","mappings":"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","sources":["webpack://jupyter_recorder/./src/index.ts"],"sourcesContent":["import {\r\n  JupyterFrontEnd,\r\n  JupyterFrontEndPlugin\r\n} from '@jupyterlab/application';\r\n// import { showDialog, Dialog } from '@jupyterlab/apputils';\r\n// import { Widget } from '@lumino/widgets';\r\nimport 'rrweb-player/dist/style.css';\r\nimport rrwebPlayer from 'rrweb-player';\r\n\r\n/**\r\n * Initialization data for the jupyter_recorder extension.\r\n */\r\n\r\nimport * as rrweb from 'rrweb';\r\n\r\nconst plugin: JupyterFrontEndPlugin<void> = {\r\n  id: 'jupyter_recorder:plugin',\r\n  description: 'Record session using rrweb and show replay in modal',\r\n  autoStart: true,\r\n  activate: (app: JupyterFrontEnd) => {\r\n    console.log('JupyterLab extension jupyter_recorder is activated!');\r\n\r\n    let events: rrweb.ReplayerEvents[] = [];\r\n    let recorder: any;\r\n\r\n    function addIgnoreClassToJupyterLabElements() {\r\n      // Example: Ignore all cells except the currently focused one\r\n      // This is just an example; you'll need to adjust selectors based on your target\r\n      const focusedCell = document.querySelector(\r\n        '.jp-Notebook .jp-mod-focused'\r\n      );\r\n      document.querySelectorAll('.jp-Notebook .jp-Cell').forEach(cell => {\r\n        if (cell !== focusedCell) {\r\n          cell.classList.add('rr-ignore');\r\n        }\r\n      });\r\n\r\n      // You might also want to ignore other parts of the JupyterLab interface\r\n      document\r\n        .querySelectorAll('.jp-SideBar, .jp-Toolbar, .jp-Menu')\r\n        .forEach(el => {\r\n          el.classList.add('rr-ignore');\r\n        });\r\n\r\n      // Ensure dynamically added elements are also ignored by observing DOM changes\r\n      // You might need a MutationObserver to dynamically add 'rr-ignore' to new elements\r\n    }\r\n\r\n    function startRecording() {\r\n      addIgnoreClassToJupyterLabElements();\r\n\r\n      console.log('Recording started');\r\n      events = [];\r\n      recorder = rrweb.record({\r\n        emit: (event: any) => {\r\n          events.push(event);\r\n        }\r\n      });\r\n    }\r\n\r\n    function stopRecording() {\r\n      console.log('Recording stopped');\r\n      if (recorder) {\r\n        recorder(); // Call the stop function directly\r\n        recorder = null;\r\n      }\r\n      // Show replay modal after stopping recording\r\n      showReplayWithControls(events);\r\n    }\r\n\r\n    function showReplayWithControls(events: any[]) {\r\n      // Ensure the events type matches your data structure\r\n      if (events.length === 0) {\r\n        console.log('No recorded events');\r\n        return;\r\n      }\r\n      console.log('Replaying session with rrweb-player controls');\r\n\r\n      // Ensure the rrweb-player styles are included\r\n      const styleLink = document.createElement('link');\r\n      styleLink.rel = 'stylesheet';\r\n      styleLink.href =\r\n        'https://cdn.jsdelivr.net/npm/rrweb-player@latest/dist/style.css';\r\n      document.head.appendChild(styleLink);\r\n\r\n      // Create a container for the rrweb-player if it doesn't already exist\r\n      let playerContainer = document.getElementById('replay-container');\r\n      if (!playerContainer) {\r\n        playerContainer = document.createElement('div');\r\n        playerContainer.id = 'replay-container';\r\n        document.body.appendChild(playerContainer);\r\n      }\r\n\r\n      // Initialize rrweb-player\r\n      new rrwebPlayer({\r\n        target: playerContainer,\r\n        props: {\r\n          events: events\r\n          // Optional: configure width, height, and other rrweb-player options\r\n        }\r\n      });\r\n\r\n      // Adding custom control bar on top of the rrweb-player\r\n      const controlBar = document.createElement('div');\r\n      controlBar.style.position = 'fixed'; // Changed to 'fixed' to ensure it's placed relative to the viewport\r\n      controlBar.style.top = '0';\r\n      controlBar.style.left = '0';\r\n      controlBar.style.width = '100%';\r\n      controlBar.style.display = 'flex';\r\n      controlBar.style.justifyContent = 'flex-end';\r\n      controlBar.style.padding = '10px';\r\n      controlBar.style.backgroundColor = 'rgba(0,0,0,0.5)';\r\n      controlBar.style.color = 'white';\r\n      controlBar.style.zIndex = '10001'; // Ensure the control bar is above the player\r\n\r\n      // Append the control bar to the body first to ensure it's on top\r\n      document.body.appendChild(controlBar);\r\n\r\n      // Cancel button to close the player and control bar\r\n      const cancelButton = document.createElement('button');\r\n      cancelButton.innerText = 'Cancel';\r\n      cancelButton.onclick = function () {\r\n        // Remove the player container\r\n        if (playerContainer) {\r\n          playerContainer.remove();\r\n        }\r\n        // Also remove the control bar\r\n        if (controlBar) {\r\n          controlBar.remove();\r\n        }\r\n      };\r\n\r\n      // Download button to download the events JSON\r\n      const downloadButton = document.createElement('button');\r\n      downloadButton.innerText = 'Download Events';\r\n      downloadButton.onclick = function () {\r\n        const blob = new Blob([JSON.stringify(events)], {\r\n          type: 'application/json'\r\n        });\r\n        const url = URL.createObjectURL(blob);\r\n        const a = document.createElement('a');\r\n        a.href = url;\r\n        a.download = 'events.json';\r\n        a.click();\r\n        URL.revokeObjectURL(url);\r\n      };\r\n\r\n      // Append buttons to the control bar\r\n      controlBar.appendChild(cancelButton);\r\n      controlBar.appendChild(downloadButton);\r\n    }\r\n\r\n    // function showReplayModal() {\r\n    //   if (events.length === 0) {\r\n    //     console.log('No recorded events');\r\n    //     return;\r\n    //   }\r\n    //   console.log('Replaying session');\r\n\r\n    //   // Create a div element to hold the replayer with specific styling\r\n    //   const div = document.createElement('div');\r\n    //   div.style.width = '100vw';\r\n    //   div.style.height = '100vh';\r\n    //   div.style.position = 'fixed';\r\n    //   div.style.top = '0';\r\n    //   div.style.left = '0';\r\n    //   div.style.margin = '0';\r\n    //   div.style.padding = '0'; // Ensure no padding\r\n    //   div.style.backgroundColor = '#fff';\r\n    //   div.style.zIndex = '1000'; // Ensure it's on top\r\n    //   div.style.display = 'flex'; // Use flex to center the child\r\n    //   div.style.justifyContent = 'center'; // Center horizontally\r\n    //   div.style.alignItems = 'center'; // Center vertically\r\n\r\n    //   // Initialize the replayer\r\n    //   const replayer = new rrweb.Replayer(events, {\r\n    //     root: div // Target the div as the root for the replay\r\n    //   });\r\n    //   // Directly adjust the replayer wrapper if necessary\r\n    //   replayer.wrapper.style.maxWidth = '100%';\r\n    //   replayer.wrapper.style.maxHeight = '100%';\r\n    //   replayer.wrapper.style.width = 'auto'; // Adjust based on your needs\r\n    //   replayer.wrapper.style.height = 'auto'; // Adjust based on your needs\r\n\r\n    //   div.appendChild(replayer.wrapper);\r\n\r\n    //   document.body.appendChild(div);\r\n\r\n    //   // Optional: Request fullscreen\r\n    //   if (div.requestFullscreen) {\r\n    //     div.requestFullscreen().catch(err => {\r\n    //       console.error(\r\n    //         `Error attempting to enable fullscreen mode: ${err.message} (${err.name})`\r\n    //       );\r\n    //     });\r\n    //   }\r\n\r\n    //   replayer.play();\r\n\r\n    //   // Adjust this to use JupyterLab's dialog if you're integrating with JupyterLab\r\n    //   console.log('running the modified code');\r\n    //   // Assuming showDialog is a function you have that creates a modal dialog\r\n    //   showDialog({\r\n    //     title: 'Replay Session',\r\n    //     body: new Widget({ node: div }),\r\n    //     buttons: [Dialog.okButton({ label: 'Close' })]\r\n    //   });\r\n    // }\r\n\r\n    // function showReplayModal() {\r\n    //   if (events.length === 0) {\r\n    //     console.log('No recorded events');\r\n    //     return;\r\n    //   }\r\n    //   console.log('Replaying session');\r\n    //   // const records = JSON.stringify({ events });\r\n    //   // localStorage.setItem('records', records);\r\n    //   // Create a div element to hold the replayer with specific styling\r\n    //   const div = document.createElement('div');\r\n    //   div.style.width = '100vw'; // Adjust width as needed\r\n    //   div.style.height = '100vh'; // Adjust height as needed\r\n    //   div.style.position = 'relative'; // Ensure it's positioned correctly within the modal\r\n\r\n    //   // Initialize the replayer with the events and target the newly created div\r\n    //   const replayer = new rrweb.Replayer(events, {\r\n    //     root: div // Target the div as the root for the replay\r\n    //   });\r\n    //   div.appendChild(replayer.wrapper);\r\n\r\n    //   // Start the replay\r\n    //   replayer.play();\r\n\r\n    //   // Show replay modal with the div as its body\r\n    //   console.log('running the modified code');\r\n    //   showDialog({\r\n    //     title: 'Replay Session',\r\n    //     body: new Widget({ node: div }),\r\n    //     buttons: [Dialog.okButton({ label: 'Close' })]\r\n    //   });\r\n    // }\r\n\r\n    // Command to start recording\r\n    app.commands.addCommand('jupyter_recorder:start', {\r\n      label: 'Start Recording',\r\n      execute: () => {\r\n        if (!recorder) {\r\n          startRecording();\r\n        } else {\r\n          console.log('Already recording');\r\n        }\r\n      }\r\n    });\r\n\r\n    // Command to stop recording\r\n    app.commands.addCommand('jupyter_recorder:stop', {\r\n      label: 'Stop Recording',\r\n      execute: () => {\r\n        if (recorder) {\r\n          stopRecording();\r\n        } else {\r\n          console.log('Not recording');\r\n        }\r\n      }\r\n    });\r\n\r\n    // Add command palette options for recording\r\n    app.contextMenu.addItem({\r\n      command: 'jupyter_recorder:start',\r\n      selector: '.jp-Notebook'\r\n    });\r\n    app.contextMenu.addItem({\r\n      command: 'jupyter_recorder:stop',\r\n      selector: '.jp-Notebook'\r\n    });\r\n  }\r\n};\r\n\r\nexport default plugin;\r\n"],"names":[],"sourceRoot":""}