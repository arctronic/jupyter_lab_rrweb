{"version":3,"file":"lib_index_js-data_image_svg_xml_base64_PHN2ZyBoZWlnaHQ9IjMwMCIgd2lkdGg9IjMwMCIgeG1sbnM9Imh0dH-96ddf1.f6fb1f0e800ba1b05322.js","mappings":"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","sources":["webpack://jupyter_recorder/./src/index.ts"],"sourcesContent":["import {\r\n  JupyterFrontEnd,\r\n  JupyterFrontEndPlugin\r\n} from '@jupyterlab/application';\r\n\r\nimport 'rrweb-player/dist/style.css';\r\nimport rrwebPlayer from 'rrweb-player';\r\n\r\n/**\r\n * Initialization data for the jupyter_recorder extension.\r\n */\r\n\r\nimport * as rrweb from 'rrweb';\r\n\r\nconst plugin: JupyterFrontEndPlugin<void> = {\r\n  id: 'jupyter_recorder:plugin',\r\n  description: 'Record session using rrweb and show replay in modal',\r\n  autoStart: true,\r\n  activate: (app: JupyterFrontEnd) => {\r\n    console.log('JupyterLab extension jupyter_recorder is activated!');\r\n    let saveIntervalId: number | null = null; // Holds the reference to the setInterval\r\n    const saveInterval = 10000;\r\n\r\n    let recorder: any;\r\n\r\n    function addIgnoreClassToJupyterLabElements() {\r\n      // Example: Ignore all cells except the currently focused one\r\n      // This is just an example; you'll need to adjust selectors based on your target\r\n      const focusedCell = document.querySelector(\r\n        '.jp-Notebook .jp-mod-focused'\r\n      );\r\n      document.querySelectorAll('.jp-Notebook .jp-Cell').forEach(cell => {\r\n        if (cell !== focusedCell) {\r\n          cell.classList.add('rr-ignore');\r\n        }\r\n      });\r\n\r\n      // You might also want to ignore other parts of the JupyterLab interface\r\n      document\r\n        .querySelectorAll('.jp-SideBar, .jp-Toolbar, .jp-Menu')\r\n        .forEach(el => {\r\n          el.classList.add('rr-ignore');\r\n        });\r\n\r\n      // Ensure dynamically added elements are also ignored by observing DOM changes\r\n      // You might need a MutationObserver to dynamically add 'rr-ignore' to new elements\r\n    }\r\n    let allEvents: any[] = []; // Holds all events for the entire session\r\n    let eventsForUpload: any[] = [];\r\n\r\n    function saveAndSendEvents() {\r\n      if (eventsForUpload.length === 0) {\r\n        console.log('No events to save or send');\r\n        return;\r\n      }\r\n\r\n      // Copy the events to send\r\n      const eventsToSend = [...eventsForUpload];\r\n      // Reset the eventsForUpload array to start fresh for the next upload\r\n      eventsForUpload = [];\r\n\r\n      // Convert events to JSON for upload\r\n      const jsonEvents = JSON.stringify(eventsToSend);\r\n\r\n      console.log('Sending events:', jsonEvents);\r\n      // Logic to save the JSON to a file or send it to a server\r\n      fetch('http://127.0.0.1:8000/shihab@gmail.com/alpha-141', {\r\n        method: 'POST',\r\n        headers: {\r\n          'Content-Type': 'application/json'\r\n        },\r\n        body: jsonEvents\r\n      })\r\n        .then(response => response.json())\r\n        .then(data => console.log('Success:', data))\r\n        .catch(error => console.error('Error:', error));\r\n    }\r\n\r\n    function startRecording() {\r\n      addIgnoreClassToJupyterLabElements();\r\n\r\n      allEvents = []; // Reset allEvents array to start fresh\r\n      eventsForUpload = []; // Also reset the eventsForUpload\r\n\r\n      recorder = rrweb.record({\r\n        emit: event => {\r\n          // Add the event to both the allEvents and eventsForUpload arrays\r\n          allEvents.push(event);\r\n          eventsForUpload.push(event);\r\n        }\r\n      });\r\n\r\n      // Setup periodic saving and sending of events\r\n      if (saveIntervalId !== null) {\r\n        clearInterval(saveIntervalId);\r\n      }\r\n      saveIntervalId = setInterval(saveAndSendEvents, saveInterval);\r\n      stopRecording();\r\n      startRecording();\r\n    }\r\n\r\n    function stopRecording() {\r\n      console.log('Recording stopped');\r\n      if (recorder) {\r\n        recorder.stop();\r\n        recorder = null;\r\n      }\r\n      if (saveIntervalId !== null) {\r\n        clearInterval(saveIntervalId);\r\n        saveIntervalId = null;\r\n      }\r\n      // Save and send any remaining events\r\n      saveAndSendEvents();\r\n      // Show replay modal after stopping recording\r\n      // showReplayWithControls(allEvents);\r\n    }\r\n\r\n    app.restored.then(() => {\r\n      startRecording();\r\n      console.log(\r\n        'Recording started triggered upon starting the jupyterlab app'\r\n      );\r\n    });\r\n\r\n    function showReplayWithControls(events: any[]) {\r\n      // Ensure the events type matches your data structure\r\n      if (events.length === 0) {\r\n        console.log('No recorded events');\r\n        return;\r\n      }\r\n      console.log('Replaying session with rrweb-player controls');\r\n\r\n      // Ensure the rrweb-player styles are included\r\n      const styleLink = document.createElement('link');\r\n      styleLink.rel = 'stylesheet';\r\n      styleLink.href =\r\n        'https://cdn.jsdelivr.net/npm/rrweb-player@latest/dist/style.css';\r\n      document.head.appendChild(styleLink);\r\n\r\n      // Create a container for the rrweb-player if it doesn't already exist\r\n      let playerContainer = document.getElementById('replay-container');\r\n      if (!playerContainer) {\r\n        playerContainer = document.createElement('div');\r\n        playerContainer.id = 'replay-container';\r\n        document.body.appendChild(playerContainer);\r\n      }\r\n\r\n      // Initialize rrweb-player\r\n      new rrwebPlayer({\r\n        target: playerContainer,\r\n        props: {\r\n          events: events\r\n        }\r\n      });\r\n\r\n      // Adding custom control bar on top of the rrweb-player\r\n      const controlBar = document.createElement('div');\r\n      controlBar.style.position = 'fixed'; // Changed to 'fixed' to ensure it's placed relative to the viewport\r\n      controlBar.style.top = '0';\r\n      controlBar.style.left = '0';\r\n      controlBar.style.width = '100%';\r\n      controlBar.style.display = 'flex';\r\n      controlBar.style.justifyContent = 'flex-end';\r\n      controlBar.style.padding = '10px';\r\n      controlBar.style.backgroundColor = 'rgba(0,0,0,0.5)';\r\n      controlBar.style.color = 'white';\r\n      controlBar.style.zIndex = '10001'; // Ensure the control bar is above the player\r\n\r\n      // Append the control bar to the body first to ensure it's on top\r\n      document.body.appendChild(controlBar);\r\n\r\n      // Cancel button to close the player and control bar\r\n      const cancelButton = document.createElement('button');\r\n      cancelButton.innerText = 'Cancel';\r\n      cancelButton.onclick = function () {\r\n        // Remove the player container\r\n        if (playerContainer) {\r\n          playerContainer.remove();\r\n        }\r\n        // Also remove the control bar\r\n        if (controlBar) {\r\n          controlBar.remove();\r\n        }\r\n      };\r\n\r\n      // Download button to download the events JSON\r\n      const downloadButton = document.createElement('button');\r\n      downloadButton.innerText = 'Download Events';\r\n      downloadButton.onclick = function () {\r\n        const blob = new Blob([JSON.stringify(events)], {\r\n          type: 'application/json'\r\n        });\r\n        const url = URL.createObjectURL(blob);\r\n        const a = document.createElement('a');\r\n        a.href = url;\r\n        a.download = 'events.json';\r\n        a.click();\r\n        URL.revokeObjectURL(url);\r\n      };\r\n\r\n      // Append buttons to the control bar\r\n      controlBar.appendChild(cancelButton);\r\n      controlBar.appendChild(downloadButton);\r\n    }\r\n\r\n    // Command to start recording\r\n    app.commands.addCommand('jupyter_recorder:start', {\r\n      label: 'Start Recording',\r\n      execute: () => {\r\n        if (!recorder) {\r\n          startRecording();\r\n        } else {\r\n          console.log('Already recording');\r\n        }\r\n      }\r\n    });\r\n\r\n    // Command to stop recording\r\n    app.commands.addCommand('jupyter_recorder:stop', {\r\n      label: 'Stop Recording',\r\n      execute: () => {\r\n        if (allEvents) {\r\n          showReplayWithControls(allEvents);\r\n        } else {\r\n          console.log('Not recording to show');\r\n        }\r\n      }\r\n    });\r\n\r\n    app.commands.addCommand('jupyter_recorder:stop', {\r\n      label: 'Play Recording',\r\n      execute: () => {\r\n        if (recorder) {\r\n          stopRecording();\r\n        } else {\r\n          console.log('Not recording');\r\n        }\r\n      }\r\n    });\r\n\r\n    // Add command palette options for recording\r\n    app.contextMenu.addItem({\r\n      command: 'jupyter_recorder:start',\r\n      selector: '.jp-Notebook'\r\n    });\r\n    app.contextMenu.addItem({\r\n      command: 'jupyter_recorder:stop',\r\n      selector: '.jp-Notebook'\r\n    });\r\n  }\r\n};\r\n\r\nexport default plugin;\r\n"],"names":[],"sourceRoot":""}